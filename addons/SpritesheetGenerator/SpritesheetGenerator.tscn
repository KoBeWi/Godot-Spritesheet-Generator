[gd_scene load_steps=6 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "Generator"
script/source = "extends Control

const SUPPORTED_FORMATS = [\"bmp\", \"dds\", \"exr\", \"hdr\", \"jpg\", \"jpeg\", \"png\", \"tga\", \"svg\", \"svgz\", \"webp\"]

onready var grid := $CenterContainer/GridContainer
var frame_prefab: PackedScene

var file_list: Array
var texture_list: Array
var output_name: String

var images_to_process: Array
var images_to_texturize: Array
var image_count: int

var auto := true
var margin := Vector2.ONE

var pan_origin: Vector2
var pan_start: Vector2

signal images_processed

func _ready():
	frame_prefab = PackedScene.new()
	grid.get_node(\"FramePrefab/MarginContainer\").owner = grid.get_node(\"FramePrefab\")
	grid.get_node(\"FramePrefab/MarginContainer/TextureRect\").owner = grid.get_node(\"FramePrefab\")
	frame_prefab.pack(grid.get_node(\"FramePrefab\"))
	grid.get_node(\"FramePrefab\").free()
	
	$Status.text = $Status.text % PoolStringArray(SUPPORTED_FORMATS).join(\", \")
	
	get_tree().connect(\"files_dropped\", self, \"load_files\")
	grid.connect(\"minimum_size_changed\", self, \"refresh_background\")
	set_process(false)

func refresh_background():
	$CenterContainer/ColorRect.rect_min_size = grid.get_minimum_size()

func load_files(files: Array, screen):
	file_list.clear()
	output_name = \"\"
	$MarginContainer/VBoxContainer/Button.disabled = false
	$MarginContainer/VBoxContainer/Button2.disabled = false
	
	if files.size() == 1:
		var dir := Directory.new()
		if dir.open(files[0]) != OK:
			show_error(\"Can't open directory.\")
			return
		
		dir.list_dir_begin(true)
		
		var file = dir.get_next()
		while file:
			if file.get_extension() in SUPPORTED_FORMATS:
				file_list.append(str(dir.get_current_dir(), \"/\", file))
			file = dir.get_next()
	else:
		var wrong_count: int
		for file in files:
			if file.get_extension() in SUPPORTED_FORMATS:
				file_list.append(file)
			else:
				wrong_count += 1
		
		if wrong_count > 0:
			show_error(\"Skipped %s file(s) with unsupported extension.\" % wrong_count)
	
	if file_list.empty():
		show_error(\"No valid files or directories to process.\")
		return
	
	load_images()

func load_images():
	texture_list.clear()
	
	for image in grid.get_children():
		image.free()
	
	var size_map: Dictionary
	
	for file in file_list:
		var image := Image.new()
		image.load(file)
		image.set_meta(\"path\", file)
		
		if not image.get_size() in size_map:
			size_map[image.get_size()] = []
		size_map[image.get_size()].append(image)
	
	var most_common_size: Vector2
	var most_common_count: int
	
	for size in size_map:
		if size_map[size].size() > most_common_count:
			most_common_size = size
			most_common_count = size_map[size].size()
	
	for image in size_map[most_common_size]:
		if output_name.empty():
			var path: String = image.get_meta(\"path\")
			output_name = str(path.get_base_dir(), \"/\", path.get_base_dir().get_file(), \".png\")
		
		images_to_process.append(image)
	size_map.clear()
	
	if images_to_process.size() < file_list.size():
		show_error(\"Rejected %s image(s) due to size mismatch.\" % (file_list.size() - images_to_process.size()))
	
	if images_to_process.size() == 1:
		images_to_process.clear()
		show_error(\"Image count must be bigger than 1.\")
		return
	
	$Status.show()
	$CenterContainer.hide()
	
	image_count = images_to_process.size()
	$MarginContainer/VBoxContainer/Columns.max_value = image_count
	
	threshold = $MarginContainer/VBoxContainer/Threshold.value
	min_x = INF
	min_y = INF
	max_x = -INF
	max_y = -INF
	
	set_process(true)
	
	yield(self, \"images_processed\")
	
	var dark := true
	
	for texture in texture_list:
		dark = not dark
		
		var rect := frame_prefab.instance()
		rect.set_texture(texture)
		rect.set_display_background($MarginContainer/VBoxContainer/DisplayGrid.pressed)
		rect.set_frame_margin(margin)
		grid.add_child(rect)
	
	toggle_auto(auto)
	refresh_margin()
	
	$Status.hide()
	$CenterContainer.show()

var threshold: float
var min_x: float
var min_y: float
var max_x: float
var max_y: float

func _process(delta: float) -> void:
	if not images_to_process.empty():
		var image: Image = images_to_process.pop_front()
		$Status.text = str(\"Preprocessing image \", image_count - images_to_process.size(), \"/\", image_count)
		
		image.lock()
		
		for x in image.get_width():
			for y in image.get_height():
				if image.get_pixel(x, y).a >= threshold:
					min_x = min(min_x, x)
					min_y = min(min_y, y)
					max_x = max(max_x, x)
					max_y = max(max_y, y)
		
		image.unlock()
		images_to_texturize.append(image)
	elif not images_to_texturize.empty():
		var rect := Rect2(min_x, min_y, max_x - min_x + 1, max_y - min_y + 1)
		var image: Image = images_to_texturize.pop_front()
		$Status.text = str(\"Creating texture \", image_count - images_to_texturize.size(), \"/\", image_count)
		
		var true_image := Image.new()
		true_image.create(rect.size.x, rect.size.y, false, image.get_format())
		true_image.blit_rect(image, rect, Vector2())
		
		var texture := ImageTexture.new()
		texture.create_from_image(true_image)
		texture_list.append(texture)
		
		if images_to_texturize.empty():
			set_process(false)
			emit_signal(\"images_processed\")

func toggle_grid(show: bool) -> void:
	get_tree().call_group(\"frame\", \"set_display_background\", show)

func toggle_auto(button_pressed: bool) -> void:
	$MarginContainer/VBoxContainer/Columns.editable = not button_pressed
	auto = button_pressed
	
	if button_pressed:
		var best: int
		var best_score = -INF
		
		for i in range(1, image_count + 1):
			var cols = i
			var rows = ceil(image_count / float(i))
			
			var score = image_count - cols * rows - max(cols, rows) - rows
			if score > best_score:
				best = i
				best_score = score
		
		grid.columns = best
	else:
		grid.columns = $MarginContainer/VBoxContainer/Columns.value
	refresh_grid()

func hmargin_changed(value: float) -> void:
	margin.x = value
	refresh_margin()

func vmargin_changed(value: float) -> void:
	margin.y = value
	refresh_margin()

func refresh_margin():
	get_tree().call_group(\"frame\", \"set_frame_margin\", margin)

func columns_changed(value: float) -> void:
	grid.columns = value
	refresh_grid()

func refresh_grid():
	var coord: Vector2
	var dark = false
	
	for rect in grid.get_children():
		rect.set_background_color(Color(0, 0, 0, 0.2 if dark else 0.1))
		dark = not dark
		coord.x += 1
		
		if coord.x == grid.columns:
			coord.x = 0
			coord.y += 1
			dark = int(coord.y) % 2 == 1

func save_png() -> void:
	var image_size: Vector2 = grid.get_child(0).get_minimum_size()
	
	var image := Image.new()
	image.create(image_size.x * grid.columns, image_size.y * (ceil(grid.get_child_count() / float(grid.columns))), false, Image.FORMAT_RGBA8)
	
	for rect in grid.get_children():
		image.blit_rect(rect.get_texture_data(), Rect2(Vector2(), image_size), rect.get_position())
	
	var name2 = $MarginContainer/VBoxContainer/HBoxContainer/LineEdit.text
	image.save_png(output_name if name2.empty() else str(output_name.get_base_dir(), \"/\", name2, \".png\"))

func show_error(text: String):
	if not $CanvasLayer/Error.visible:
		$CanvasLayer/Error.show()
	else:
		$CanvasLayer/Error.text += \"\\n\"
	$CanvasLayer/Error.text += text
	$CanvasLayer/Timer.start()

func error_hidden() -> void:
	$CanvasLayer/Error.text = \"\"

func _input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == BUTTON_MIDDLE:
			if event.pressed:
				pan_origin = get_local_mouse_position()
				pan_start = $CenterContainer.rect_position
			else:
				pan_origin = Vector2()
		
		if event.button_index == BUTTON_WHEEL_DOWN:
			$CenterContainer.rect_scale -= Vector2.ONE * 0.05
		elif event.button_index == BUTTON_WHEEL_UP:
			$CenterContainer.rect_scale += Vector2.ONE * 0.05
	
	if event is InputEventMouseMotion:
		if pan_origin != Vector2():
			$CenterContainer.rect_position = pan_start + (get_local_mouse_position() - pan_origin)
"

[sub_resource type="StyleBoxFlat" id=5]
content_margin_left = 20.0
content_margin_right = 20.0
content_margin_top = 20.0
content_margin_bottom = 20.0
bg_color = Color( 0, 0, 0, 0.25098 )

[sub_resource type="StyleBoxFlat" id=4]
content_margin_left = 2.0
content_margin_right = 2.0
bg_color = Color( 0.172549, 0.164706, 0.196078, 1 )

[sub_resource type="StyleBoxFlat" id=2]
resource_local_to_scene = true
bg_color = Color( 0, 0.501961, 0.501961, 1 )

[sub_resource type="GDScript" id=3]
resource_name = "Prefab"
script/source = "extends PanelContainer

var odd: Vector2

func set_frame_margin(margin: Vector2):
	$MarginContainer.add_constant_override(\"margin_left\", margin.x)
	$MarginContainer.add_constant_override(\"margin_top\", margin.y)
	
	margin += odd
	
	$MarginContainer.add_constant_override(\"margin_right\", margin.x)
	$MarginContainer.add_constant_override(\"margin_bottom\", margin.y)

func set_texture(texture: Texture):
	$MarginContainer/TextureRect.texture = texture
	odd = Vector2(int(get_texture_size().x) % 2, int(get_texture_size().y) % 2)

func get_texture_size() -> Vector2:
	return $MarginContainer/TextureRect.texture.get_size()

func get_position() -> Vector2:
	return rect_position + $MarginContainer/TextureRect.rect_position

func get_size() -> Vector2:
	return $MarginContainer/TextureRect.rect_size

func get_texture_data() -> Image:
	return $MarginContainer/TextureRect.texture.get_data()

func set_display_background(display: bool):
	get_stylebox(\"panel\").draw_center = display

func set_background_color(color: Color):
	get_stylebox(\"panel\").bg_color = color

func get_drag_data(position: Vector2):
	var preview = TextureRect.new()
	preview.texture = $MarginContainer/TextureRect.texture
	preview.expand = true
	preview.rect_size = Vector2(64, 64)
	set_drag_preview(preview)
	return {type = \"SpritesheetFrame\", node = self}

func can_drop_data(position: Vector2, data) -> bool:
	return data is Dictionary and data.get(\"type\", \"\") == \"SpritesheetFrame\"

func drop_data(position: Vector2, data) -> void:
	var index = get_index()
	get_parent().move_child(self, data.node.get_index())
	get_parent().move_child(data.node, index)
	get_tree().current_scene.refresh_grid()
"

[node name="Main" type="HBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="MarginContainer" type="PanelContainer" parent="."]
margin_right = 153.0
margin_bottom = 600.0
custom_styles/panel = SubResource( 5 )

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
margin_left = 20.0
margin_top = 20.0
margin_right = 133.0
margin_bottom = 580.0
custom_constants/separation = 10

[node name="Label5" type="Label" parent="MarginContainer/VBoxContainer"]
margin_right = 113.0
margin_bottom = 14.0
text = "Alpha Threshold"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Threshold" type="SpinBox" parent="MarginContainer/VBoxContainer"]
margin_top = 24.0
margin_right = 113.0
margin_bottom = 48.0
max_value = 1.0
step = 0.005
value = 0.9
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 58.0
margin_right = 113.0
margin_bottom = 78.0
disabled = true
text = "Reload"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSeparator" type="HSeparator" parent="MarginContainer/VBoxContainer"]
margin_top = 88.0
margin_right = 113.0
margin_bottom = 92.0

[node name="Label" type="Label" parent="MarginContainer/VBoxContainer"]
margin_top = 102.0
margin_right = 113.0
margin_bottom = 116.0
text = "Columns"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Columns" type="SpinBox" parent="MarginContainer/VBoxContainer"]
margin_top = 126.0
margin_right = 113.0
margin_bottom = 150.0
min_value = 1.0
value = 1.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Grid" type="CheckButton" parent="MarginContainer/VBoxContainer"]
margin_top = 160.0
margin_right = 113.0
margin_bottom = 200.0
pressed = true
text = "Auto"

[node name="Label3" type="Label" parent="MarginContainer/VBoxContainer"]
margin_top = 210.0
margin_right = 113.0
margin_bottom = 224.0
text = "Horizontal Margin"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MarginH" type="SpinBox" parent="MarginContainer/VBoxContainer"]
margin_top = 234.0
margin_right = 113.0
margin_bottom = 258.0
value = 1.0
suffix = " px"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label4" type="Label" parent="MarginContainer/VBoxContainer"]
margin_top = 268.0
margin_right = 113.0
margin_bottom = 282.0
text = "Vertical Margin"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MarginV" type="SpinBox" parent="MarginContainer/VBoxContainer"]
margin_top = 292.0
margin_right = 113.0
margin_bottom = 316.0
max_value = 128.0
value = 1.0
suffix = "px"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSeparator2" type="HSeparator" parent="MarginContainer/VBoxContainer"]
margin_top = 326.0
margin_right = 113.0
margin_bottom = 330.0

[node name="DisplayGrid" type="CheckBox" parent="MarginContainer/VBoxContainer"]
margin_top = 340.0
margin_right = 113.0
margin_bottom = 364.0
pressed = true
text = "Show Grid"

[node name="HSeparator3" type="HSeparator" parent="MarginContainer/VBoxContainer"]
margin_top = 374.0
margin_right = 113.0
margin_bottom = 378.0

[node name="HBoxContainer" type="HBoxContainer" parent="MarginContainer/VBoxContainer"]
margin_top = 388.0
margin_right = 113.0
margin_bottom = 412.0

[node name="LineEdit" type="LineEdit" parent="MarginContainer/VBoxContainer/HBoxContainer"]
margin_right = 99.0
margin_bottom = 24.0
size_flags_horizontal = 3
placeholder_text = "Custom name"

[node name="Label" type="Label" parent="MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 103.0
margin_right = 113.0
margin_bottom = 24.0
hint_tooltip = "Defaults to directory name if not provided."
mouse_filter = 0
size_flags_vertical = 1
custom_styles/normal = SubResource( 4 )
text = "?"
valign = 1

[node name="Button2" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 422.0
margin_right = 113.0
margin_bottom = 442.0
disabled = true
text = "Save PNG"

[node name="Status" type="Label" parent="."]
margin_left = 157.0
margin_right = 1024.0
margin_bottom = 600.0
size_flags_horizontal = 3
size_flags_vertical = 3
text = "Drop folder or image files here to start.

Images should be of the same size. If their sizes don't match, the generator will try to use the dominating size.

The images will be automatically cropped based on the Alpha Threshold value. Greater value means more exact crop.

Supported formats: %s"
align = 1
valign = 1

[node name="CenterContainer" type="CenterContainer" parent="."]
visible = false
show_behind_parent = true
margin_left = 1040.0
margin_right = 1920.0
margin_bottom = 1080.0
size_flags_horizontal = 3

[node name="ColorRect" type="ColorRect" parent="CenterContainer"]
margin_left = 440.0
margin_top = 540.0
margin_right = 440.0
margin_bottom = 540.0
color = Color( 0, 0.501961, 0.501961, 1 )

[node name="GridContainer" type="GridContainer" parent="CenterContainer"]
margin_left = 440.0
margin_top = 540.0
margin_right = 440.0
margin_bottom = 540.0
custom_constants/vseparation = 0
custom_constants/hseparation = 0
columns = 3

[node name="FramePrefab" type="PanelContainer" parent="CenterContainer/GridContainer" groups=["frame"]]
custom_styles/panel = SubResource( 2 )
script = SubResource( 3 )

[node name="MarginContainer" type="MarginContainer" parent="CenterContainer/GridContainer/FramePrefab"]
mouse_filter = 2

[node name="TextureRect" type="TextureRect" parent="CenterContainer/GridContainer/FramePrefab/MarginContainer"]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Error" type="Label" parent="CanvasLayer"]
modulate = Color( 1, 0, 0, 1 )
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -14.0
grow_vertical = 0
size_flags_vertical = 0
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="CanvasLayer"]
wait_time = 5.0
one_shot = true

[connection signal="pressed" from="MarginContainer/VBoxContainer/Button" to="." method="load_images"]
[connection signal="value_changed" from="MarginContainer/VBoxContainer/Columns" to="." method="columns_changed"]
[connection signal="toggled" from="MarginContainer/VBoxContainer/Grid" to="." method="toggle_auto"]
[connection signal="value_changed" from="MarginContainer/VBoxContainer/MarginH" to="." method="hmargin_changed"]
[connection signal="value_changed" from="MarginContainer/VBoxContainer/MarginV" to="." method="vmargin_changed"]
[connection signal="toggled" from="MarginContainer/VBoxContainer/DisplayGrid" to="." method="toggle_grid"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/Button2" to="." method="save_png"]
[connection signal="hide" from="CanvasLayer/Error" to="." method="error_hidden"]
[connection signal="timeout" from="CanvasLayer/Timer" to="CanvasLayer/Error" method="hide"]
